// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String        @id @default(uuid())
  login          String        @unique
  password       String
  contacts       UserContact[] @relation("UserContacts")
  contactOf      UserContact[] @relation("ContactOfUser")
  conversations   Conversation[]
  sentMessages   Message[]     @relation("SentMessages")
}


model UserContact {
  id         String   @id @default(uuid())
  userId     String
  contactId  String

  user       User     @relation("UserContacts", fields: [userId], references: [id])
  contact    User     @relation("ContactOfUser", fields: [contactId], references: [id])

  createdAt  DateTime @default(now())
}



model Conversation {
  id            String                  @id @default(uuid())
  participants  User[] 
  messages      Message[]              @relation("ConversationMessages")
  lastMessage   Message?                @relation("LastMessage", fields: [lastMessageId], references: [id])
  lastMessageId String?                 @unique

  createdAt     DateTime               @default(now())
}

model Message {
  id                String         @id @default(uuid())
  content           String
  senderId          String
  conversationId    String
  createdAt         DateTime       @default(now())

  sender            User           @relation("SentMessages", fields: [senderId], references: [id])
  conversation      Conversation   @relation("ConversationMessages", fields: [conversationId], references: [id])
  lastConversation  Conversation?  @relation("LastMessage")
}
